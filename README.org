* System Design


** Database Decisions
*** MongoDB as Primary Store
**** Reasons
- Query patterns favor document model (nested comments, embedded upvotes)
- Eventual consistency acceptable for social features
- No complex transactions needed
- Easy horizontal scaling for future
**** Concerns
- 16MB document limit could be hit with high user engagement
- May need migration strategy if social graph features added later


** Data Modeling Decisions
*** User Management
- Using browser fingerprint as user_id for MVP
- No authentication/sessions needed
- Trade-off: Cannot prevent duplicate accounts

*** Posts Collection
- Embedded upvoted_by array instead of separate collection
**** Benefits
- Single query retrieves post with upvote status
- Atomic updates for upvoting
**** Concerns
- Document growth with user scale
- Need to monitor array size at >5k users

*** Comments Structure
- Parent comments as separate docs with EMBEDDED recursive replies
**** Benefits
- Single query retrieves full comment thread
- No N+1 query problem for nested replies (really big issue, imagine a post with 100 comments and avg 5 nested comments... image the number of queries to db?)
- Better read performance for thread views
**** Concerns
- Cannot paginate replies independently
- Migration needed if reply chains grow too large


** Performance Considerations
*** Indexing Strategy
- Compound index on {upvote_count, created_at} for top posts
- Index on post_id for comment queries


** Scale Limitations
- Current design optimal for ~1-5k active users
- Need refactoring at scale:
 1. Move to separate upvotes collection
 2. Implement proper user authentication
 3. Consider splitting comment threads
 4. Add caching layer for top posts


** MVP Compromises
- No user profiles/karma
- No categories/tags
- No downvotes
- Simple fingerprint-based identification
- Focus on core read patterns optimization









#+BEGIN_SRC
architoct/
├── internal/
│   ├── store/              # All MongoDB operations
│   │   ├── post.go         # Basic CRUD
│   │   ├── comment.go
│   │   ├── upvote.go
│   │   └── user.go
│   │
│   ├── service/            # Business logic
│   │   └── forum.go        # Single service with all operations
│   │
│   └── handler/            # HTMX handlers
└── main.go

HTMX -> Handler -> service -> relevant store -> MongoDB
#+END_SRC


* A TLDR guide to hexagonal architecture and why its Jr. engineers must understand it:
Goal: we are trying to build something that atleast tries to follow SOLID principles - because they make lives of engineers really easy.
1. Single resposiblity: each class should have one and only one resposiblity
2. Open close: a class should be open for extension but closed for modification
3. Liskov substitution: objects should be replaceable with instances/subtypes without altering correctness
4. interface seg:
5. Dependency inversion: depend on abstractions instead of concrete classes

   (I dont get    all but heres what I mean mostly)
